
//**********************************************************************
#ifdef FORM_SET_TYPEDEF

#endif

#ifdef MAIN_FORM_SET

#ifdef FORM_SET_VARSTORE

#endif

#ifdef FORM_SET_ITEM

    text
      help = STRING_TOKEN(STR_EMPTY),
      text = STRING_TOKEN(STR_BIOS_VENDOR_NAME),
      text = STRING_TOKEN(STR_BIOS_VENDOR_VALUE);      

    text
    	 help = STRING_TOKEN(STR_EMPTY),
    	 text = STRING_TOKEN(STR_BIOS_VERSION_NAME),
    	 text = STRING_TOKEN(STR_BIOS_VERSION_VALUE);
    
//    text
//      help = STRING_TOKEN(STR_EMPTY),
//      text = STRING_TOKEN(STR_BIOS_RELEASE_VERSION_NAME),
//      text = STRING_TOKEN(STR_BIOS_RELEASE_VERSION_VALUE);    

    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_BOARD_ID_NAME),
      text   = STRING_TOKEN(STR_BOARD_ID_VALUE);     
    
    //text
	  //help   = STRING_TOKEN(STR_EMPTY),
	  //text   = STRING_TOKEN(STR_BMC_FIRMWARE_VERSION_NAME),
	  //text   = STRING_TOKEN(STR_BMC_FIRMWARE_VERSION_VALUE);

    //text
	  //help   = STRING_TOKEN(STR_EMPTY),
	  //text   = STRING_TOKEN(STR_CPLD_FIRMWARE_VERSION_NAME),
	  //text   = STRING_TOKEN(STR_CPLD_FIRMWARE_VERSION_VALUE);    

    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_LAN_MAC_ADDR_NAME),
      text   = STRING_TOKEN(STR_LAN_MAC_ADDR_VALUE);
      
#if TKN_ONBOARD_LAN_MAX_COUNT >= 2      
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_LAN2_MAC_ADDR_NAME),
      text   = STRING_TOKEN(STR_LAN2_MAC_ADDR_VALUE);
#endif      

    //subtitle text = STRING_TOKEN(STR_EMPTY);       
    suppressif ideqval SETUP_DATA.LoginUserType == 1;
      text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_LOGIN_TYPE),
        text   = STRING_TOKEN(STR_LOGIN_TYPE_VALUE0);
    endif;  
    suppressif ideqval SETUP_DATA.LoginUserType == 0;
      text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_LOGIN_TYPE),
        text   = STRING_TOKEN(STR_LOGIN_TYPE_VALUE1);
    endif;


      
#endif



#ifdef FORM_SET_FORM

  form formid = AUTO_ID(MAIN_FIRMWARE_FORM_ID),
    title = STRING_TOKEN(STR_MAIN_FIRMWARE_FORM);
    subtitle text = STRING_TOKEN(STR_EMPTY);

    text
      help = STRING_TOKEN(STR_EMPTY),
      text = STRING_TOKEN(STR_BIOS_RELEASE_VERSION_NAME),
      text = STRING_TOKEN(STR_BIOS_RELEASE_VERSION_VALUE);
    
    suppressif ideqval SETUP_DATA.HideBrandLogo == 1;
    #if BC_TENCENT
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_CUSTOMER_NAME),
      text   = STRING_TOKEN(STR_CUSTOMER_VALUE_TENCENT);
    #else
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_CUSTOMER_NAME),
      text   = STRING_TOKEN(STR_CUSTOMER_VALUE); 
    #endif
    endif;
    
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_BIOS_DATE_NAME),
      text   = STRING_TOKEN(STR_BIOS_DATE_VALUE); 

    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_UEFI_VERSION_NAME),
      text   = STRING_TOKEN(STR_UEFI_VERSION_VALUE);

     text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_HYGON_PI_VER_NAME),
      text   = STRING_TOKEN(STR_HYGON_PI_VER_VALUE);

  endform; 
  
  form formid = AUTO_ID(MAIN_CPU_FORM_ID),
    title = STRING_TOKEN(STR_MAIN_CPU_FORM);

    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_NUMBER_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_NUMBER_VALUE);
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_MANUFACTURER_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_MANUFACTURER_VALUE);

    subtitle text = STRING_TOKEN(STR_EMPTY);
    subtitle text = STRING_TOKEN(STR_PROCESSOR_0);

    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_VERSION_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_VERSION_VALUE);
                                                       
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CORE_COUNT_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CORE_COUNT_VALUE),
      flags  = 0, 
      key    = 0;

	text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_THREAD_COUNT_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_THREAD_COUNT_VALUE),
      flags  = 0, 
      key    = 0; 

    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_VALUE),
      flags  = 0, 
      key    = 0;

    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L1_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L1_VALUE);
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L2_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L2_VALUE);
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L3_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L3_VALUE);    

    subtitle text = STRING_TOKEN(STR_EMPTY);
    subtitle text = STRING_TOKEN(STR_PROCESSOR_1);
	  
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_VERSION_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_VERSION_VALUE_1);
 
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CORE_COUNT_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CORE_COUNT_VALUE_1),
      flags  = 0, 
      key    = 0;

	text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_THREAD_COUNT_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_THREAD_COUNT_VALUE_1),
      flags  = 0, 
      key    = 0;

    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_SPEED_VALUE_1),
      flags  = 0, 
      key    = 0;

    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L1_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L1_VALUE_1);
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L2_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L2_VALUE_1);
    text 
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L3_STRING),
      text   = STRING_TOKEN(STR_PROCESSOR_CACHE_L3_VALUE_1);    

  endform; 
  
  form formid = AUTO_ID(MAIN_DATE_TIME_FORM_ID),
    title = STRING_TOKEN(STR_DATE_TIME_FORM);
    LOGIN_TYPE_ADMIN;

    date 
      year varid  = Date.Year,
        prompt  = STRING_TOKEN(STR_DATE),
        help    = STRING_TOKEN(STR_DATE_HELP),
        minimum = 2020,
        maximum = 2099,
        step    = 1,
        default = 2020,
        
      month varid = Date.Month,
        prompt  = STRING_TOKEN(STR_DATE),
        help    = STRING_TOKEN(STR_DATE_HELP),
        minimum = 1,
        maximum = 12,
        step    = 1,
        default = 1,
        
      day varid   = Date.Day,
        prompt  = STRING_TOKEN(STR_DATE),
        help    = STRING_TOKEN(STR_DATE_HELP),
        minimum = 1,
        maximum = 31,
        step    = 1,
        default = 1,
    enddate;    
    
    time
      hour varid  = Time.Hours,
        prompt  = STRING_TOKEN(STR_TIME),
        help    = STRING_TOKEN(STR_TIME_HELP),
        minimum = 0,
        maximum = 23,
        step    = 1, 
        default = 0,
      
      minute varid = Time.Minutes,
        prompt  = STRING_TOKEN(STR_TIME),
        help    = STRING_TOKEN(STR_TIME_HELP),
        minimum = 0,
        maximum = 59,
        step    = 1,
        default = 0,
        
      second varid = Time.Seconds,
        prompt  = STRING_TOKEN(STR_TIME),
        help    = STRING_TOKEN(STR_TIME_HELP),
        minimum = 0,
        maximum = 59,
        step    = 1,
        default = 0,
    endtime;  
    END_LOGIN_TYPE;
  endform;  
  
  
  


  form formid = MAIN_SYSTEM_SUMMARY_FORM_ID, 
  
    title = STRING_TOKEN(STR_SYSTEM_SUMMARY);

    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_SYSTEM_MANUFACTURER_NAME),
      text   = STRING_TOKEN(STR_SYSTEM_MANUFACTURER_VALUE);      
   
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_SYSTEM_SERIAL_NUMBER_NAME),
      text   = STRING_TOKEN(STR_SYSTEM_SERIAL_NUMBER_VALUE);

    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_ASSET_TAG_NAME),
      text   = STRING_TOKEN(STR_ASSET_TAG_VALUE);
    
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_SYSTEM_UUID_NAME),
      text   = STRING_TOKEN(STR_SYSTEM_UUID_VALUE);

    subtitle text = STRING_TOKEN(STR_EMPTY);      
     
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_LAN_MAC_ADDR_NAME),
      text   = STRING_TOKEN(STR_LAN_MAC_ADDR_VALUE);
      
#if TKN_ONBOARD_LAN_MAX_COUNT >= 2      
    text
      help   = STRING_TOKEN(STR_EMPTY),
      text   = STRING_TOKEN(STR_LAN2_MAC_ADDR_NAME),
      text   = STRING_TOKEN(STR_LAN2_MAC_ADDR_VALUE);
#endif      
      
  endform; 
   
#endif               // FORM_SET_FORM



#ifdef FORM_SET_GOTO

  goto MAIN_FIRMWARE_FORM_ID,
    prompt = STRING_TOKEN(STR_MAIN_FIRMWARE_FORM),
    help   = STRING_TOKEN(STR_MAIN_FIRMWARE_FORM);

  goto MAIN_CPU_FORM_ID,
    prompt = STRING_TOKEN(STR_MAIN_CPU_FORM),
    help   = STRING_TOKEN(STR_MAIN_CPU_FORM);

  goto MAIN_MEMORY_FORM_ID,
    prompt = STRING_TOKEN(STR_MAIN_MEMORY_FORM),
    help   = STRING_TOKEN(STR_MAIN_MEMORY_FORM);

  goto MAIN_DATE_TIME_FORM_ID,
    prompt = STRING_TOKEN(STR_DATE_TIME_FORM),
    help   = STRING_TOKEN(STR_DATE_TIME_FORM);

  //goto MAIN_SYSTEM_SUMMARY_FORM_ID,
    //prompt = STRING_TOKEN(STR_SYSTEM_SUMMARY),
    //help   = STRING_TOKEN(STR_SYSTEM_SUMMARY);
    
#endif

#endif           // MAIN_FORM_SET
