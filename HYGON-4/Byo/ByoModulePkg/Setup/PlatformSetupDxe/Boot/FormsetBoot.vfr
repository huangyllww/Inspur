/*++

Copyright (c) 2010 - 2015, Byosoft Corporation.<BR>
All rights reserved.This software and associated documentation (if any)
is furnished under a license and may only be used or copied in
accordance with the terms of the license. Except as permitted by such
license, no part of this software or documentation may be reproduced,
stored in a retrieval system, or transmitted in any form or by any
means without the express written consent of Byosoft Corporation.

File Name:

Abstract:
  Platform configuration setup.

Revision History:


--*/

#include "FormsetConfiguration.h"
#include <Guid/GlobalVariable.h>
#include <Guid/BootRetryPolicyVariable.h>
#include <SysMiscCfg.h>

formset
  guid     = FORMSET_GUID_BOOT,
  title    = STRING_TOKEN(FORMSET_TITLE_BOOT),
  help     = STRING_TOKEN(FORMSET_TITLE_BOOT_HELP),
  classguid = FORMSET_GUID_BOOT,

  SYSTEM_PASSWORD_VARSTORE
  efivarstore BOOT_TIMEOUT_DATA,
      attribute = 0x7,  // EFI variable attributes,EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE
      name  = Timeout,
      guid  = EFI_GLOBAL_VARIABLE;
  
  efivarstore BYO_PLATFOMR_SETUP,
      attribute = 0x7,  // EFI variable attributes,EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE
      name  = ByoSetup,
      guid  = gPlatformSetupVariableGuid;

  efivarstore BOOT_RETRY_POLICY_VARIABLE,
    attribute = 0x7,
    name      = BootRetryPolicy,
    guid      = BOOT_RETRY_POLICY_GUID;
  
  form formid = ROOT_FORM_ID,
    title    = STRING_TOKEN(FORMSET_TITLE_BOOT);
    subtitle text = STRING_TOKEN(STR_EMPTY);

    LOGIN_TYPE_ADMIN;
    disableif TRUE;
        numeric varid     = BYO_PLATFOMR_SETUP.PlatId,
        prompt      = STRING_TOKEN(STR_PLATID_PROMPT),
        help        = STRING_TOKEN(STR_EMPTY),
          minimum = 0,
          maximum = 0x1,
          step    = 1,
        endnumeric;
    endif;

#if FixedPcdGetBool(PcdPlatSupportCSM)
      oneof varid  = BYO_PLATFOMR_SETUP.Csm,
        questionid = KEY_VALUE_CSM_CONFIGURATION,
        prompt = STRING_TOKEN(STR_ENABLE_CSM),
        help = STRING_TOKEN(STR_ENABLE_CSM_HELP),
        flags = INTERACTIVE,
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;

      suppressif ideqval BYO_PLATFOMR_SETUP.Csm == 0;
        oneof varid  = BYO_PLATFOMR_SETUP.BootModeType,
          prompt = STRING_TOKEN(STR_BOOT_MODE),
          help = STRING_TOKEN(STR_BOOT_MODE_HELP),
          option text = STRING_TOKEN(STR_UEFI_ONLY),   value = BIOS_BOOT_UEFI_OS,   flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_LEGACY_ONLY), value = BIOS_BOOT_LEGACY_OS, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval BYO_PLATFOMR_SETUP.Csm == 1;
        text
          help   = STRING_TOKEN(STR_EMPTY),
          text   = STRING_TOKEN(STR_BOOT_MODE),
          text   = STRING_TOKEN(STR_UEFI_ONLY),
          flags  = 0,
          key    = 0;
      endif;
#endif

    numeric varid = BOOT_TIMEOUT_DATA.Timeout,
        prompt    = STRING_TOKEN(STR_BOOT_TIMEOUT),
        help      = STRING_TOKEN(STR_BOOT_TIMEOUT_HELP),
        minimum   = 0,
        maximum   = 65535,
        step      = 1,
        default   = 5,
      endnumeric;
    
    oneof varid  = BYO_PLATFOMR_SETUP.NumLockEn,
      prompt = STRING_TOKEN(STR_BOOTUP_NUMLOCK_PROMPT),
      help   = STRING_TOKEN(STR_BOOTUP_NUMLOCK_HELP),
      option text = STRING_TOKEN(STR_BOOTUP_NUMLOCK_ON),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_BOOTUP_NUMLOCK_OFF), value = 0, flags = RESET_REQUIRED;       
    endoneof; 

    oneof varid  = BYO_PLATFOMR_SETUP.ShellEn,
      prompt = STRING_TOKEN(STR_SHELL_ENABLE),
      help   = STRING_TOKEN(STR_SHELL_ENABLE_HELP),
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;       
    endoneof; 

    oneof varid  = BOOT_RETRY_POLICY_VARIABLE.AllRetryTime,
      prompt = STRING_TOKEN(STR_ALLRETRY_ENABLE),
      help   = STRING_TOKEN(STR_ALLRETRY_ENABLE_HELP),
      option text = STRING_TOKEN(STR_ENABLED),  value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;       
    endoneof; 

    suppressif ideqval BOOT_RETRY_POLICY_VARIABLE.AllRetryTime == 0;
        oneof varid  = BYO_PLATFOMR_SETUP.PxeOnlyEn,
          prompt = STRING_TOKEN(STR_PXEONLY_ENABLE),
          help   = STRING_TOKEN(STR_PXEONLY_ENABLE_HELP),
          option text = STRING_TOKEN(STR_ENABLED),  value = 0xFF, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;       
        endoneof; 
    endif;

    numeric varid = BYO_PLATFOMR_SETUP.PxeRetryEn,
          prompt    = STRING_TOKEN(STR_PXE_RETRY_EN),
          help      = STRING_TOKEN(STR_PXE_RETRY_EN_HELP),
          minimum   = 0,
          maximum   = FixedPcdGet16(PcdPxeRetryForeverValue),
          step      = 1,
          default   = 0,
    endnumeric; 


    oneof varid  = BYO_PLATFOMR_SETUP.QuietBoot,
      prompt = STRING_TOKEN(STR_QUIET_BOOT_ENABLE),
      help   = STRING_TOKEN(STR_QUIET_BOOT_ENABLE_HELP),
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED| DEFAULT | MANUFACTURING;
    endoneof;

#if FixedPcdGetBool(PcdPlatSupportCSM)
    suppressif ideqval BYO_PLATFOMR_SETUP.Csm == 0;
      //
      // keep this at the last position in front of LABEL_CHANGE_BOOT_ORDER
      //
      subtitle text = STRING_TOKEN(STR_NULL_STRING);
      oneof varid  = BYO_PLATFOMR_SETUP.OptionRomExecution,
        prompt = STRING_TOKEN(STR_OPTION_ROM_EXECUTION),
        help = STRING_TOKEN(STR_OPTION_ROM_EXECUTION_HELP),
        option text = STRING_TOKEN(STR_AUTO),   value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_MANUAL), value = 1, flags = RESET_REQUIRED;
      endoneof;
      suppressif ideqval BYO_PLATFOMR_SETUP.OptionRomExecution == 0;
        goto FORM_OPROM_PRIORITY,
          prompt = STRING_TOKEN(STR_PCI_OPTION_ROM_POST),
          help   = STRING_TOKEN(STR_PCI_OPTION_ROM_POST_HELP);
      endif; // suppressif ideqval BYO_PLATFOMR_SETUP.OptionRomExecution == 0;
    endif; // suppressif ideqval BYO_PLATFOMR_SETUP.Csm == 0;
#endif

    END_LOGIN_TYPE;

    subtitle text = STRING_TOKEN(STR_EMPTY);	
    label LABEL_CHANGE_BOOT_ORDER;
    //
    // This is where we will dynamically add Boot Pages.
    //
    label LABEL_END;	


  endform;

  form formid = FORM_OPROM_PRIORITY,
    title = STRING_TOKEN(STR_PCI_OPTION_ROM_POST);

        oneof varid  = BYO_PLATFOMR_SETUP.VideoRomPolicy,
          prompt = STRING_TOKEN(STR_VIDEO_ROM_PRIORITY),
          help   = STRING_TOKEN(STR_ROM_PRIORITY_HELP),
          option text = STRING_TOKEN(STR_LEGACY_FIRST), value = ROM_POLICY_LEGACY_FIRST, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_UEFI_FIRST),   value = ROM_POLICY_UEFI_FIRST,   flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_NO_LAUNCH),    value = ROM_POLICY_NO_LAUNCH,    flags = RESET_REQUIRED;
        endoneof;

        oneof varid = BYO_PLATFOMR_SETUP.PxeRomPolicy,
          prompt = STRING_TOKEN(STR_NETWORK_ROM_PRIORITY),
          help   = STRING_TOKEN(STR_ROM_PRIORITY_HELP),
          option text = STRING_TOKEN(STR_LEGACY_FIRST), value = ROM_POLICY_LEGACY_FIRST, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_UEFI_FIRST),   value = ROM_POLICY_UEFI_FIRST,   flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_NO_LAUNCH),    value = ROM_POLICY_NO_LAUNCH,    flags = RESET_REQUIRED;
        endoneof;

        oneof varid = BYO_PLATFOMR_SETUP.StorageRomPolicy,
          prompt = STRING_TOKEN(STR_SATA_ROM_PRIORITY),
          help   = STRING_TOKEN(STR_ROM_PRIORITY_HELP),
          option text = STRING_TOKEN(STR_LEGACY_FIRST), value = ROM_POLICY_LEGACY_FIRST, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_UEFI_FIRST),   value = ROM_POLICY_UEFI_FIRST,   flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_NO_LAUNCH),    value = ROM_POLICY_NO_LAUNCH,    flags = RESET_REQUIRED;
        endoneof;

        oneof varid = BYO_PLATFOMR_SETUP.OtherRomPolicy,
          prompt = STRING_TOKEN(STR_OTHER_ROM_PRIORITY),
          help   = STRING_TOKEN(STR_ROM_PRIORITY_HELP),
          option text = STRING_TOKEN(STR_LEGACY_FIRST), value = ROM_POLICY_LEGACY_FIRST, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_UEFI_FIRST),   value = ROM_POLICY_UEFI_FIRST,   flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_NO_LAUNCH),    value = ROM_POLICY_NO_LAUNCH,    flags = RESET_REQUIRED;
        endoneof;

    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_OPROM_PRIORITY_NOTES);
  endform;

endformset;
