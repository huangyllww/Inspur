/*++

Copyright (c) 2010 - 2018, Byosoft Corporation.<BR>
All rights reserved.This software and associated documentation (if any)
is furnished under a license and may only be used or copied in
accordance with the terms of the license. Except as permitted by such
license, no part of this software or documentation may be reproduced,
stored in a retrieval system, or transmitted in any form or by any
means without the express written consent of Byosoft Corporation.

File Name:

Abstract:
  Platform configuration setup.

Revision History:


--*/

#include "FormsetConfiguration.h" 

formset
  guid     = FORMSET_GUID_SECURITY,
  title    = STRING_TOKEN(FORMSET_TITLE_SECURITY),
  help     = STRING_TOKEN(FORMSET_TITLE_SECURITY_HELP),
  classguid = FORMSET_GUID_SECURITY,

  SYSTEM_PASSWORD_VARSTORE

  SYSTEM_PASSWORD_DATA_VARSTORE

  BYO_PLATFOMR_SETUP_VARSTORE

  form formid = ROOT_FORM_ID,
    title    = STRING_TOKEN(FORMSET_TITLE_SECURITY);

    subtitle text = STRING_TOKEN(STR_EMPTY);

    grayoutif TRUE;
      suppressif ideqval SYS_PD.bHaveAdmin == 0x00;
      text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_ADMIN_PASSWORD),
        text   = STRING_TOKEN(STR_PASSWORD_INSTALLED),
        flags  = 0,
        key    = 0;
      endif;

      suppressif NOT ideqval SYS_PD.bHaveAdmin == 0x00;
      text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_ADMIN_PASSWORD),
        text   = STRING_TOKEN(STR_PASSWORD_UNINSTALLED),
        flags  = 0,
        key    = 0;
      endif;
    endif;

    grayoutif TRUE;
    suppressif ideqval SYS_PD.bHavePowerOn == 0x00;
    text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_USER_PASSWORD),
        text   = STRING_TOKEN(STR_PASSWORD_INSTALLED),
        flags  = 0,
        key    = 0;
    endif;

    suppressif NOT ideqval SYS_PD.bHavePowerOn == 0x00;
    text
        help   = STRING_TOKEN(STR_EMPTY),
        text   = STRING_TOKEN(STR_USER_PASSWORD),
        text   = STRING_TOKEN(STR_PASSWORD_UNINSTALLED),
        flags  = 0,
        key    = 0;
    endif;
    endif;

    subtitle text = STRING_TOKEN(STR_EMPTY);
    LOGIN_TYPE_ADMIN;
    password varid  = SysPdData.Admin, 
        prompt      = STRING_TOKEN(STR_SET_ADMIN_PASSWORD),
        help        = STRING_TOKEN(STR_ADMIN_PASSWORD_HELP),
        flags       = 0 | RESET_REQUIRED | INTERACTIVE, key = SEC_KEY_ADMIN_PD,
        minsize     = SYSTEM_PASSWORD_MIN_LENGTH,
        maxsize     = SYSTEM_PASSWORD_LENGTH,
    endpassword;
    END_LOGIN_TYPE;

    grayoutif ideqval SYS_PD.ChangePopByUser == 0x0;
    password varid  = SysPdData.PowerOn,
        prompt      = STRING_TOKEN(STR_SET_USER_PASSWORD),
        help        = STRING_TOKEN(STR_USER_PASSWORD_HELP),
        flags       = 0 | RESET_REQUIRED | INTERACTIVE, key = SEC_KEY_POWER_ON_PD,
        minsize     = SYSTEM_PASSWORD_MIN_LENGTH,
        maxsize     = SYSTEM_PASSWORD_LENGTH,
    endpassword;
    endif;

    grayoutif NOT ideqval SYS_PD.bHaveAdmin == 0x00 
      OR NOT ideqval SYS_PD.bHavePowerOn == 0x00;
      oneof varid   = SYS_PD.HashType,
        prompt      = STRING_TOKEN(STR_SET_PASSWORD_HASH_TYPE),
        help        = STRING_TOKEN(STR_SET_PASSWORD_HASH_TYPE_HELP),
        
        option text = STRING_TOKEN(STR_HASH_SHA256),     value = 0,  flags = DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_HASH_SM3),  value = 1,  flags = 0x0;
        option text = STRING_TOKEN(STR_HASH_SHA512),  value = 2,  flags = 0x0;
        option text = STRING_TOKEN(STR_HASH_SHA384),  value = 3,  flags = 0x0;
      endoneof;
    endif;

    suppressif ideqval SYS_PD.bHaveAdmin == 0x00 AND ideqval SYS_PD.bHavePowerOn == 0x00;
    LOGIN_TYPE_ADMIN;
    oneof varid   = SYS_PD.PasswordValidDays,
      prompt      = STRING_TOKEN(STR_SET_PASSWORD_VALID_DAYS),
      help        = STRING_TOKEN(STR_SET_PASSWORD_VALID_DAYS_HELP),
      option text = STRING_TOKEN(STR_FOREVER),     value = 0,  flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SEVEN_DAYS),  value = 7,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_THIRTY_DAYS), value = 30, flags = RESET_REQUIRED;
    endoneof;
    END_LOGIN_TYPE;
    endif;

    suppressif ideqval SYS_PD.bHaveAdmin == 0x00 AND ideqval SYS_PD.bHavePowerOn == 0x00;
    oneof varid   = SYS_PD.RequirePopOnRestart,
      prompt      = STRING_TOKEN(STR_POP_ON_RESTART),
      help        = STRING_TOKEN(STR_POP_ON_RESTART_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;
    endif;

  suppressif TRUE;
    subtitle text = STRING_TOKEN(STR_EMPTY);
    LOGIN_TYPE == LOGIN_USER_POP;
    suppressif ideqval SYS_PD.bHaveAdmin == 0x00;
    oneof varid   = SYS_PD.ChangePopByUser,
      prompt      = STRING_TOKEN(STR_CHANGE_POP_BY_USER),
      help        = STRING_TOKEN(STR_CHANGE_POP_BY_USER_HELP),
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
    endoneof;
    endif;
    END_LOGIN_TYPE;

    LOGIN_TYPE_ADMIN;
    suppressif ideqval SYS_PD.bHavePowerOn == 0x00 OR
      ideqval SYS_PD.ChangePopByUser == 0;
      suppressif ideqval SYS_PD.bHaveAdmin == 0x00;
    text 
      help   = STRING_TOKEN(STR_CLEAR_USER_PASSWORD_HELP),
      text   = STRING_TOKEN(STR_CLEAR_USER_PASSWORD),
      flags  = 0 | RESET_REQUIRED | INTERACTIVE,
      key    = SEC_KEY_CLEAR_USER_PD;      
    endif;
    endif;
    END_LOGIN_TYPE;
  endif;

    LOGIN_TYPE_ADMIN;
  // roll-back begin
    oneof varid = BYO_PLATFOMR_SETUP.FlashRollBackProtect,
      prompt      = STRING_TOKEN (STR_FLASH_ROLLBACK_PROTECT),
      help        = STRING_TOKEN (STR_FLASH_ROLLBACK_PROTECT),
      option text = STRING_TOKEN (STR_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN (STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

// roll-back end 
    oneof varid   = BYO_PLATFOMR_SETUP.PasswordComplexity,
          prompt  = STRING_TOKEN(STR_PASSWORD_COMPLEXITY),
          help    = STRING_TOKEN(STR_PASSWORD_COMPLEXITY_HELP),
          option text = STRING_TOKEN(STR_ENABLED),     value = 1,  flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED),  value = 0,  flags = RESET_REQUIRED;
    endoneof;
	  numeric varid   = BYO_PLATFOMR_SETUP.MaxVerifyTimes,
	          prompt  = STRING_TOKEN(STR_PASSWORD_VERIFY_TIME),
	          help    = STRING_TOKEN(STR_PASSWORD_VERIFY_TIME_HELP),
	          minimum = 0,
	          maximum = 10,
	          step    = 1,
	          default = 3,
	  endnumeric;
    numeric varid   = BYO_PLATFOMR_SETUP.PasswordRepeatTimes,
	          prompt  = STRING_TOKEN(STR_PASSWORD_REPEAT_TITLE),
	          help    = STRING_TOKEN(STR_PASSWORD_REPEAT_TITLE_HELP),
	          minimum = 0,
	          maximum = FixedPcdGet8(PcdPasswordMaxRecorderTime),
	          step    = 1,
	          default = 5,
    endnumeric;
    numeric varid   = BYO_PLATFOMR_SETUP.UnlockTime,
            prompt  = STRING_TOKEN(STR_PASSWORD_UNLOCK_TIME),
            help    = STRING_TOKEN(STR_PASSWORD_UNLOCK_TIME_HELP),
            minimum = 0,
            maximum = 65535,
            step    = 1,
            default = 65535,
    endnumeric;
    oneof varid   = BYO_PLATFOMR_SETUP.ScreenLockTime,
          prompt  = STRING_TOKEN(STR_SCREEN_LOCK_TIME),
          help    = STRING_TOKEN(STR_SCREEN_LOCK_TIME_HELP),
          option text = STRING_TOKEN(STR_SCREEN_UNLOCK),     value = 0,  flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_ONE_MINUTE),  value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_THREEN_MINUTE), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_FIVE_MINUTE),  value = 5,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_TEN_MINUTE), value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_FIFTEEN_MINUTE), value = 15, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_THIRTY_MINUTE),  value = 30,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SCREEN_HOUR_MINUTE), value = 60, flags = RESET_REQUIRED;
    endoneof;

    numeric varid   = BYO_PLATFOMR_SETUP.PasswordReminderDays,
	        prompt  = STRING_TOKEN(STR_PASSWORD_REMINDE_DAYS),
	        help    = STRING_TOKEN(STR_PASSWORD_REMINDE_DAYS_HELP),
	        minimum = 0,
	        maximum = 10,
	        step    = 1,
	        default = 0,
    endnumeric;

    subtitle text = STRING_TOKEN(STR_EMPTY);

    label SECURITY_DYNAMIC_LABEL;
    //
    // This is where we will dynamically add security pages.
    //
    label LABEL_END;	
    
    END_LOGIN_TYPE;
 
  endform;  
endformset;


